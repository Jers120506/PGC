#!/usr/bin/env python
"""
Verificaci√≥n final de la soluci√≥n de dropdowns
"""

import requests
import json

def test_final_solution():
    """Prueba final de la soluci√≥n"""
    print("üéØ VERIFICACI√ìN FINAL DE LA SOLUCI√ìN")
    print("=" * 50)
    
    # 1. Probar API
    print("1. üì° Probando API de recursos...")
    try:
        response = requests.get("http://127.0.0.1:8000/academic-system/schedules/resources/")
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                resources = data.get('data', {})
                print("   ‚úÖ API funcionando correctamente")
                
                # Verificar cada tipo de recurso
                resource_counts = {}
                for key, items in resources.items():
                    count = len(items) if isinstance(items, list) else 0
                    resource_counts[key] = count
                    print(f"   ‚Ä¢ {key}: {count} elementos")
                
                if all(count > 0 for count in resource_counts.values()):
                    print("   ‚úÖ Todos los recursos disponibles")
                    return True
                else:
                    print("   ‚ùå Faltan algunos recursos")
                    return False
            else:
                print(f"   ‚ùå Error en API: {data.get('message')}")
                return False
        else:
            print(f"   ‚ùå Error HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
        return False

def show_instructions():
    """Mostrar instrucciones finales"""
    print(f"\nüöÄ INSTRUCCIONES FINALES:")
    print("-" * 30)
    print("1. Ve a: http://127.0.0.1:8000/academic-system/schedules/")
    print("2. Presiona F12 para abrir la consola")
    print("3. Haz clic en 'Crear Nuevo Horario'")
    print("4. Los dropdowns se deben llenar autom√°ticamente")
    print()
    print("Si hay problemas, ejecuta en la consola:")
    print("‚Ä¢ debugResources()       - Ver recursos disponibles")
    print("‚Ä¢ forcePopulateSelects() - Forzar llenado de dropdowns")
    print("‚Ä¢ testCreateModal()      - Probar modal completo")

def main():
    api_ok = test_final_solution()
    
    if api_ok:
        print(f"\nüéâ SOLUCI√ìN APLICADA CORRECTAMENTE")
        print(f"‚úÖ Las APIs funcionan")
        print(f"‚úÖ Los datos est√°n disponibles")
        print(f"‚úÖ Los selectores JavaScript fueron corregidos")
        print(f"‚úÖ Se agregaron funciones de depuraci√≥n")
        
        show_instructions()
        
        print(f"\nüìã CAMBIOS REALIZADOS:")
        print(f"‚Ä¢ Corregidos selectores JavaScript en populateSelectOptions()")
        print(f"‚Ä¢ Agregado selector alternativo autom√°tico")
        print(f"‚Ä¢ Mejorados logs de diagn√≥stico")
        print(f"‚Ä¢ Agregadas funciones de depuraci√≥n globales")
        
        print(f"\nüí° Si los dropdowns siguen sin funcionar:")
        print(f"1. Recarga la p√°gina (Ctrl+F5)")
        print(f"2. Verifica la consola del navegador")
        print(f"3. Usa las funciones de depuraci√≥n disponibles")
        
    else:
        print(f"\n‚ö†Ô∏è HAY PROBLEMAS CON LAS APIS")
        print(f"Aseg√∫rate de que el servidor Django est√© corriendo:")
        print(f"python manage.py runserver")

if __name__ == "__main__":
    main()