#!/usr/bin/env python
"""
Script para probar las APIs del sistema de horarios directamente
"""

import requests
import json

def test_resources_api():
    """Probar la API de recursos"""
    print("üß™ PROBANDO API DE RECURSOS")
    print("=" * 50)
    
    try:
        url = "http://127.0.0.1:8000/academic-system/schedules/resources/"
        response = requests.get(url)
        
        print(f"üì° Status: {response.status_code}")
        print(f"üìã Content-Type: {response.headers.get('content-type')}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ API funcionando correctamente")
                print(f"üìä Estructura de respuesta: {data.get('status')}")
                
                if data.get('status') == 'success':
                    api_data = data.get('data', {})
                    print(f"\nüìä DATOS DISPONIBLES:")
                    print(f"   ‚Ä¢ Cursos: {len(api_data.get('courses', []))}")
                    print(f"   ‚Ä¢ Profesores: {len(api_data.get('teachers', []))}")
                    print(f"   ‚Ä¢ Salones: {len(api_data.get('classrooms', []))}")
                    print(f"   ‚Ä¢ Materias: {len(api_data.get('subjects', []))}")
                    print(f"   ‚Ä¢ Franjas: {len(api_data.get('time_slots', []))}")
                    
                    # Mostrar ejemplos
                    if api_data.get('courses'):
                        print(f"\nüìö EJEMPLOS DE CURSOS:")
                        for course in api_data['courses'][:3]:
                            print(f"   ‚Ä¢ ID: {course['id']}, Nombre: {course['name']}")
                    
                    if api_data.get('teachers'):
                        print(f"\nüë®‚Äçüè´ EJEMPLOS DE PROFESORES:")
                        for teacher in api_data['teachers'][:3]:
                            print(f"   ‚Ä¢ ID: {teacher['id']}, Nombre: {teacher['name']}")
                    
                    # Verificar si hay datos suficientes
                    all_counts = [
                        len(api_data.get('courses', [])),
                        len(api_data.get('teachers', [])),
                        len(api_data.get('classrooms', [])),
                        len(api_data.get('subjects', [])),
                        len(api_data.get('time_slots', []))
                    ]
                    
                    if all(count > 0 for count in all_counts):
                        print(f"\n‚úÖ TODOS LOS DATOS DISPONIBLES - DROPDOWNS DEBER√çAN FUNCIONAR")
                        return True
                    else:
                        empty_fields = []
                        if not api_data.get('courses'): empty_fields.append('cursos')
                        if not api_data.get('teachers'): empty_fields.append('profesores')
                        if not api_data.get('classrooms'): empty_fields.append('salones')
                        if not api_data.get('subjects'): empty_fields.append('materias')
                        if not api_data.get('time_slots'): empty_fields.append('franjas')
                        
                        print(f"\n‚ùå FALTAN DATOS EN: {', '.join(empty_fields)}")
                        return False
                        
                else:
                    print(f"‚ùå Error en API: {data.get('message')}")
                    return False
                    
            except json.JSONDecodeError:
                print(f"‚ùå Error: Respuesta no es JSON v√°lido")
                print(f"Contenido: {response.text[:200]}")
                return False
                
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(f"Contenido: {response.text[:200]}")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_schedule_list_api():
    """Probar la API de lista de horarios"""
    print(f"\nüß™ PROBANDO API DE LISTA DE HORARIOS")
    print("=" * 50)
    
    try:
        url = "http://127.0.0.1:8000/academic-system/schedules/api/"
        response = requests.get(url)
        
        print(f"üì° Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                schedules = data.get('data', [])
                print(f"‚úÖ API funcionando - {len(schedules)} horarios encontrados")
                
                if schedules:
                    print(f"\nüìÖ EJEMPLO DE HORARIO:")
                    example = schedules[0]
                    print(f"   ‚Ä¢ Curso: {example.get('course_name')}")
                    print(f"   ‚Ä¢ Materia: {example.get('subject_name')}")
                    print(f"   ‚Ä¢ Profesor: {example.get('teacher_name')}")
                    print(f"   ‚Ä¢ D√≠a: {example.get('weekday')}")
                    print(f"   ‚Ä¢ Hora: {example.get('time_slot_name')}")
                
                return True
            else:
                print(f"‚ùå Error en API: {data.get('message')}")
                return False
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ VERIFICACI√ìN DE APIs DEL SISTEMA DE HORARIOS")
    print("=" * 60)
    
    # Probar API de recursos
    resources_ok = test_resources_api()
    
    # Probar API de horarios
    schedules_ok = test_schedule_list_api()
    
    print(f"\nüìã RESUMEN:")
    print("=" * 30)
    print(f"üîó API de Recursos: {'‚úÖ OK' if resources_ok else '‚ùå FALLA'}")
    print(f"üìÖ API de Horarios: {'‚úÖ OK' if schedules_ok else '‚ùå FALLA'}")
    
    if resources_ok and schedules_ok:
        print(f"\nüéâ ¬°APIS FUNCIONANDO CORRECTAMENTE!")
        print(f"üí° Los dropdowns en el frontend deber√≠an llenarse ahora")
        print(f"üåê Ve a: http://127.0.0.1:8000/academic-system/schedules/")
        print(f"üìù Haz clic en 'Crear Nuevo Horario' para verificar los dropdowns")
    else:
        print(f"\n‚ö†Ô∏è Hay problemas con las APIs")
        
    print(f"\nüîß ACCIONES RECOMENDADAS:")
    print(f"1. Ve a la p√°gina: http://127.0.0.1:8000/academic-system/schedules/")
    print(f"2. Abre las herramientas de desarrollador (F12)")
    print(f"3. Ve a la pesta√±a Console")
    print(f"4. Haz clic en 'Crear Nuevo Horario'")
    print(f"5. Revisa si hay errores en la consola")

if __name__ == "__main__":
    main()